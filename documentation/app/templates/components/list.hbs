{{!
  Copyright (c) HashiCorp, Inc.
}}

<PageHeader
  @title="List"
  @figma="https://www.figma.com/file/KIkyC5ChM8vczgqwnAeCg9/Consul-%7C-UI-Unification?type=design&node-id=3315-544301&mode=dev"
  @github="https://github.com/hashicorp/consul-ui-toolkit/tree/main/toolkit/src/components/cut/filter-bar"
  @status="development"
>
  The List component is used to display list views, including their content,
  filter bar, empty states and pagination.
</PageHeader>

<div class="list-demo-controls">
  <p>Controls for the list demo. This demo is mostly to present the structure
    and how pagination can be set up. It is set up pretty scrappy way so it
    doesn't currently read state back from the query parameters, nor does it
    filter/paginate any real data.</p>
  <Hds::SegmentedGroup as |SG|>
    <SG.Dropdown as |DD|>
      <DD.ToggleButton @text="Pagination Method" />
      <DD.Radio
        checked={{this.isRouteBased}}
        {{on "click" (fn (mut this.isRouteBased) true)}}
      >Route based</DD.Radio>
      <DD.Radio
        checked={{not this.isRouteBased}}
        {{on "click" (fn (mut this.isRouteBased) false)}}
      >Function based</DD.Radio>
    </SG.Dropdown>
    <SG.Dropdown as |DD|>
      <DD.ToggleButton @text="Has items" />
      <DD.Radio
        checked={{this.hasItems}}
        {{on "click" (fn (mut this.hasItems) true)}}
      >True</DD.Radio>
      <DD.Radio
        checked={{not this.hasItems}}
        {{on "click" (fn (mut this.hasItems) false)}}
      >False</DD.Radio>
    </SG.Dropdown>
    <SG.Dropdown as |DD|>
      <DD.ToggleButton @text="Empty state type" />
      <DD.Radio
        checked={{this.isGenericEmptyState}}
        {{on "click" (fn (mut this.isGenericEmptyState) true)}}
      >True</DD.Radio>
      <DD.Radio
        checked={{not this.isGenericEmptyState}}
        {{on "click" (fn (mut this.isGenericEmptyState) false)}}
      >False</DD.Radio>
    </SG.Dropdown>
    <SG.Dropdown as |DD|>
      <DD.ToggleButton @text="List item interactivity" />
      <DD.Radio
        checked={{this.isListItemInteractive}}
        {{on "click" (fn (mut this.isListItemInteractive) true)}}
      >True</DD.Radio>
      <DD.Radio
        checked={{not this.isListItemInteractive}}
        {{on "click" (fn (mut this.isListItemInteractive) false)}}
      >False</DD.Radio>
    </SG.Dropdown>
  </Hds::SegmentedGroup>
</div>

<Cut::List @items={{this.items}} as |L|>
  <L.FilterBar
    @config={{this.filters}}
    @onChange={{this.handleFilterChange}}
    as |FB|
  >
    <FB.Filter
      @name="clusterID"
      @listPosition="bottom-left"
      @isMultiSelect={{true}}
      @batch={{true}}
      as |F|
    >
      <F.ToggleButton
        @icon="server-cluster"
        @text="Cluster ID"
        @color="secondary"
      />
      <F.FilterInput
        @value={{this.search}}
        @count={{this.filteredClusters.length}}
        @onInput={{this.updateSearch}}
      />
      {{#each this.filteredClusters as |cluster|}}
        <F.Checkbox
          @value={{cluster.id}}
          @name={{cluster.name}}
        >{{cluster.name}}</F.Checkbox>
      {{/each}}
    </FB.Filter>

    <FB.Search placeholder="Search for services" />
    <FB.FilterGroup as |Filters|>
      <Filters.Filter
        @name="status"
        @batch={{true}}
        @isMultiSelect={{true}}
        as |F|
      >
        <F.ToggleButton @text="Status" />
        <F.Checkbox @value="critical" @name="Critical"><Hds::Badge
            @icon="x"
            @text="critical"
            @color="critical"
          /></F.Checkbox>
        <F.Checkbox @value="warning" @name="Warning"><Hds::Badge
            @icon="alert-triangle"
            @text="warning"
            @color="warning"
          /></F.Checkbox>
        <F.Checkbox @value="running" @name="Running"><Hds::Badge
            @icon="check"
            @text="running"
            @color="success"
          /></F.Checkbox>
      </Filters.Filter>
      <Filters.Filter
        @name="serviceType"
        @batch={{true}}
        @isMultiSelect={{true}}
        as |F|
      >
        <F.ToggleButton @text="Type" />
        <F.Description @text="Service" />
        <F.Checkbox @value="service" @name="Service" />
        <F.Description @text="Gateway" />
        <F.Checkbox @value="api-gateway" @name="API Gateway" />
        <F.Checkbox @value="ingress-gateway" @name="Ingress Gateway" />
        <F.Checkbox @value="terminating-gateway" @name="Terminating Gateway" />
        <F.Checkbox @value="mesh-gateway" @name="Mesh Gateway" />
        <F.Description @text="Mesh" />
        <F.Checkbox @value="mesh" @name="In service mesh" />
        <F.Checkbox @value="no-mesh" @name="Not in service mesh" />
        <F.Description @text="mTLS Mode" />
        <F.Checkbox @value="permissive-mtls" @name="Permissive" />
        <F.Checkbox @value="strict-mtls" @name="Strict" />
      </Filters.Filter>
      <Filters.Filter
        @name="source"
        @batch={{true}}
        @isMultiSelect={{true}}
        as |F|
      >
        <F.ToggleButton @text="Source" />
        <F.Description @text="Registration" />
        <F.Checkbox @value="consul" @name="Consul" />
        <F.Checkbox @value="terraform" @name="Terraform" />
        <F.Checkbox @value="vault" @name="Vault" />
        <F.Checkbox @value="aws" @name="AWS" />
        <F.Description @text="Imported" />
        <F.Checkbox @value="peer-import" @name="From peer" />
        <F.Checkbox @value="partition-import" @name="From partition" />
      </Filters.Filter>
    </FB.FilterGroup>
    <FB.Sort as |S|>
      <S.Checkmark @value="-health" @name="Critical to healthy" />
      <S.Checkmark @value="health" @name="Healthy to critical" />
      <S.Checkmark @value="alpha" @name="Alphabetical (A-Z)" />
      <S.Checkmark @value="-alpha" @name="Alphabetical (Z-A)" />
      <S.Checkmark @value="sameness" @name="Sameness group" />
    </FB.Sort>
  </L.FilterBar>
  <L.ServiceListItem
    @service={{this.serviceListItem}}
    @onClick={{if this.isListItemInteractive this.dummy}}
  />
  {{#if this.isGenericEmptyState}}
    <L.EmptyGeneric>
      <div>
        <iframe
          title="empty-state"
          src="https://giphy.com/embed/g01ZnwAUvutuK8GIQn"
          width="480"
          height="270"
          frameBorder="0"
          class="giphy-embed"
          allowFullScreen
        ></iframe><p><a
            href="https://giphy.com/gifs/high-quality-highqualitygifs-g01ZnwAUvutuK8GIQn"
          >via GIPHY</a></p>
      </div>
    </L.EmptyGeneric>
  {{else}}
    <L.EmptyAppState as |AS|>
      <AS.Header
        @title="Looks like there is nothing here amigo"
        @icon="alert-circle"
      />
      <AS.Body
        @text="There's nothing more to say, but I wanted this to have body"
      />
    </L.EmptyAppState>
  {{/if}}
  {{#if this.isRouteBased}}
    <L.Pagination
      @pageSizes={{array 5 10 20 30}}
      @currentPageSize={{this.size}}
      @prevCursor={{this.model.prevCursor}}
      @nextCursor={{this.model.nextCursor}}
    />
  {{else}}
    <L.Pagination
      @pageSizes={{array 5 10 20 30}}
      @currentPageSize={{this.size}}
      @prevCursor={{this.model.prevCursor}}
      @nextCursor={{this.model.nextCursor}}
      @onPageChange={{this.updatePage}}
      @onPageSizeChange={{this.updatePageSize}}
    />
  {{/if}}
</Cut::List>